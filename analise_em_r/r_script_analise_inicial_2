---
title: "relatorio_grupo6"
output: html_document
date: "2025-03-22"
editor_options: 
  markdown: 
    wrap: 72
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
# Instalar pacotes necessários (se ainda não instalaste)
if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

install.packages("openxlsx")
install.packages("FSA")
install.packages("ggpubr")

BiocManager::install("cBioPortalData")
BiocManager::install("SummarizedExperiment")

# Carregar pacotes
library(cBioPortalData)
library(MultiAssayExperiment)
library(SummarizedExperiment)
library(dplyr)
library(openxlsx)
library(ggplot2)
library(FSA)
library(ggpubr)
library(lmtest)
# Download do dataset KIRC (Kidney Renal Clear Cell Carcinoma TCGA)
kirc_pack <- cBioDataPack("kirc_tcga")

# Resumo dos dados carregados
summary(kirc_pack)

# Confirmar nomes exatos dos experimentos disponíveis
names(experiments(kirc_pack))

# Carregar corretamente os dados de expressão génica (RNA-seq)
rna_data <- assay(kirc_pack, "mrna_seq_v2_rsem")

# Carregar dados clínicos
clinical_data <- colData(kirc_pack) %>% as.data.frame()

# Verificar rapidamente os dados carregados
dim(rna_data)
head(rna_data[, 1:5])

dim(clinical_data)
head(clinical_data)
```

## Análise inicial dos dados

Nesta fase procedeu-se à exploração inicial dos dados de forma a
perceber a dimensão dos dados correspondentes à expressão genética bem
como dos metadados.

#criar ficheiro xlsx para analise em python

write.xlsx(linhas_metadados, "linhas_metadados.xlsx")

write.xlsx(clinical_data, "amostras_metadados.xlsx")

```{r, echo=FALSE, results='markup', warning=FALSE, message=FALSE}
# Análise da estrutura dos dados descarregados
cat("Class of kirc_pack:", class(kirc_pack), "\n")
cat("Class of rna_data:", class(rna_data), "\n")
cat("Dimensions of rna_data:", paste(dim(rna_data)[1], "x", dim(rna_data)[2]), "\n")
cat("First 5 column names of rna_data:", paste(colnames(rna_data)[1:5], collapse=", "), "\n")
cat("First 5 row names of rna_data:", paste(rownames(rna_data)[1:5], collapse=", "), "\n")

cat("\n")

# Análise dos metadados a partir do experimento de expressão génica
linhas_metadados <- SummarizedExperiment::rowData(experiments(kirc_pack)[["mrna_seq_v2_rsem"]])
amostras_metadados <- clinical_data[clinical_data$SAMPLE_ID %in% colnames(experiments(kirc_pack)[["mrna_seq_v2_rsem"]]), ]


cat("Class of linhas_metadados:", class(linhas_metadados), "\n",
    "Class of amostras_metadados:", class(amostras_metadados), "\n",
    "Dimensions of linhas_metadados:", paste(dim(linhas_metadados), collapse=" x "), "\n",
    "Dimensions of amostras_metadados:", paste(dim(amostras_metadados), collapse=" x "), "\n",
    "First 5 column names of linhas_metadados:", paste(colnames(linhas_metadados)[1:5], collapse=", "), "\n",
    "First 5 column names of amostras_metadados:", paste(colnames(amostras_metadados)[1:5], collapse=", "), "\n")
```

## 2.3 Preparação e pré-processamento dos dados

Nesta etapa preparamos o dataset para ser, posteriormente, submetido a
análise de expressão diferencial e de enriquecimento.

```{r}
# Extração da matriz de expresrnsão génica
geneExp <- SummarizedExperiment::assay(experiments(kirc_pack)[["mrna_seq_v2_rsem"]])

#transformar em dataframe
geneExp_df <- as.data.frame(geneExp)
```

Com o package **SummarizedExperiment** recorremos ao comando **assay()**
para extrair a matriz de expressão do objeto `SummarizedExperiment`.
Esta matriz contém os dados numéricos de expressão para cada gene em
cada amostra, que são essenciais para análises subsequentes, como
normalização, análise de expressão diferencial e análise de
enriquecimento.

```{r}
#criar ficheiro xlsx para analise em python
write.xlsx(linhas_metadados, "linhas_metadados.xlsx")
write.xlsx(clinical_data, "amostras_metadados.xlsx")
write.xlsx(geneExp_df, "gene_expression.xlsx")
```

# 3. Metadados

## 3.1. Pré-processamento e filtragem

Com o intuito de fazer uma filtragem dos metadados, uma vez que é comum
a existência de valores omissos, procedeu-se à diminuição do número de
colunas associadas aos metadados, eliminando-se as colunas que possuem
mais de 10% de valores omissos.

```{r, echo=TRUE}
# Remoção de colunas com mais de 10% de valores omissos ou "not Available"
amostras_metadados[amostras_metadados == "[Not Available]"] <- NA

# Calcular a percentagem de valores ausentes por coluna
missing_percent <- colMeans(is.na(amostras_metadados)) * 100

# Manter apenas colunas com menos de 10% de valores ausentes
amostras_metadados_limpo <- amostras_metadados[, missing_percent < 10]

# Verificar o número de colunas antes e depois
cat("Colunas antes da limpeza:", ncol(amostras_metadados), "\n")
cat("Colunas depois da limpeza:", ncol(amostras_metadados_limpo), "\n")
```

Com esta filtragem foi possível diminuir o número de colunas, garantindo
que os parâmetros utilizados para posterior análise abrangem a maioria
das amostras.

## 3.2. Análise Descritiva e Exploratória {.tabset}

```{r}
status_counts <- table(amostras_metadados_limpo$OS_STATUS, useNA = "ifany")

# Converter para dataframe para o ggplot
df_status <- as.data.frame(status_counts)
colnames(df_status) <- c("Status", "Count")

# Criar o gráfico de barras
ggplot(df_status, aes(x = Status, y = Count, fill = Status)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = Count), vjust = -0.5, color = "black", size = 4) +  # Adiciona o número em cima da barra
  theme_minimal() +
  labs(title = "Distribuição de OS_STATUS (Vivos, Mortos)",
       x = "Status do Paciente",
       y = "Número de Pacientes") +
  scale_fill_manual(values = c("0:LIVING" = "green", "1:DECEASED" = "red"))
```

```{r}
laterality_counts <- table(amostras_metadados_limpo$LATERALITY, useNA = "ifany")

# Converter para dataframe para o ggplot
df_laterality <- as.data.frame(laterality_counts)
colnames(df_laterality) <- c("Laterality", "Count")

# Criar o gráfico de barras
ggplot(df_laterality, aes(x =Laterality, y = Count, fill = Laterality)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = Count), vjust = -0.5, color = "black", size = 4) +  # Adiciona o número em cima da barra
  theme_minimal() +
  labs(title = "Distribuição de LATERALITY (Rim esquerdo, direito e Bilateral)",
       x = "Lateralidade do Paciente",
       y = "Número de Pacientes") +
  scale_fill_manual(values = c("gray", "red", "blue"))

```

```{r}
#ajustavel para se perceber melhor a distribuição normal (binwidth=5)
ggplot(amostras_metadados_limpo, aes(x = AGE)) +
  geom_histogram(binwidth = 1, fill = "steelblue", color = "black", alpha = 0.7) +
  theme_minimal() +
  labs(title = "Distribuição das Idades dos Pacientes",
       x = "Idade",
       y = "Frequência") +
  theme(axis.text = element_text(size = 12),
        axis.title = element_text(size = 14))
```

```{r}
#corrigir o MALE que conta como Male
amostras_metadados_limpo$SEX <- replace(amostras_metadados_limpo$SEX, 
                                        amostras_metadados_limpo$SEX == "MALE", 
                                        "Male")

sex_counts <- table(amostras_metadados_limpo$SEX, useNA = "ifany")

# Converter para dataframe para usar no ggplot
df_sex <- as.data.frame(sex_counts)
colnames(df_sex) <- c("Sex", "Count")

# Calcular percentagens
df_sex$Percentage <- (df_sex$Count / sum(df_sex$Count)) * 100

# Criar rótulos combinando valores absolutos e percentuais
df_sex$Label <- paste0(df_sex$Count, " (", round(df_sex$Percentage, 1), "%)")

# Criar o gráfico de barras
ggplot(df_sex, aes(x = Sex, y = Count, fill = Sex)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = Label), vjust = -0.5, color = "black", size = 4) +  # Adiciona rótulos com números e percentagens
  theme_minimal() +
  labs(title = "Distribuição do Sexo dos Pacientes",
       x = "Sexo",
       y = "Número de Pacientes") +
  scale_fill_brewer(palette = "Set1")
```

```{r}
amostras_metadados_limpo <- amostras_metadados_limpo[amostras_metadados_limpo$AJCC_PATHOLOGIC_TUMOR_STAGE %in% c("Stage I", "Stage II", "Stage III", "Stage IV"), ]

stage_counts <- table(amostras_metadados_limpo$AJCC_PATHOLOGIC_TUMOR_STAGE, useNA = "ifany")

# Converter para dataframe para usar no ggplot
df_stage <- as.data.frame(stage_counts)
colnames(df_stage) <- c("Stage", "Count")

# Calcular percentagens
df_stage$Percentage <- (df_stage$Count / sum(df_stage$Count)) * 100

# Criar rótulos combinando valores absolutos e percentagens
df_stage$Label <- paste0(df_stage$Count, " (", round(df_stage$Percentage, 1), "%)")

# Criar o gráfico de barras
ggplot(df_stage, aes(x = Stage, y = Count, fill = Stage)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = Label), vjust = -0.5, color = "black", size = 4) +  # Adiciona rótulos com números e percentagens
  theme_minimal() +
  labs(title = "Distribuição dos Estágios do Cancro (AJCC)",
       x = "Estágio do Tumor",
       y = "Número de Pacientes") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # Inclina os rótulos do eixo X para melhor visualização
  scale_fill_brewer(palette = "Set3")
```

```{r}
race_counts <- table(amostras_metadados_limpo$RACE)

df_race <- as.data.frame(race_counts)
colnames(df_race) <- c("Race", "Count")

# Calcular percentagens
df_race$Percentage <- (df_race$Count / sum(df_race$Count)) * 100

# Criar rótulos combinando valores absolutos e percentuais
df_race$Label <- paste0(df_race$Count, " (", round(df_race$Percentage, 1), "%)")

# Criar o gráfico de barras
ggplot(df_race, aes(x = Race, y = Count, fill = Race)) +
  geom_bar(stat = "identity") +
  geom_text(aes(label = Label), vjust = -0.5, color = "black", size = 4) +  # Adiciona rótulos com números e percentagens
  theme_minimal() +
  labs(title = "Distribuição da Raça dos Pacientes",
       y = "Número de Pacientes") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) + # Inclina os rótulos do eixo X para melhor visualização
  scale_fill_brewer(palette = "Set2")
```

# 4. Testes de Hipótese

## 4.1 Idade por OS_STATUS

```{r}
# 1. Criar o modelo ANOVA
anova_result <- aov(AGE ~ OS_STATUS, data = df_box)

# 2. Obter os resíduos do modelo
residuos <- residuals(anova_result)

# 3. Teste de Shapiro-Wilk (normalidade)
shapiro.test(residuos)

# 4. QQ plot dos resíduos
qqnorm(residuos)
qqline(residuos, col = "red")
```

p-value \< 0.05 → rejeitamos a hipótese nula de normalidade dos
resíduos. Isso significa que os resíduos não seguem uma distribuição
normal Usamos uma teste não parametrico, Mann-Whitney-Wilcoxon.

```{r}
wilcox.test(AGE ~ OS_STATUS, data = df_box)
```

O p-value é pequeno (\< 0.001).

Há uma diferença estatisticamente significativa entre as distribuições
de idade dos pacientes vivos e falecidos.

```{r}
# Remover NAs na idade e status
df_box <- amostras_metadados_limpo %>%
  filter(!is.na(AGE), !is.na(OS_STATUS))

# Criar gráfico de boxplot
ggplot(df_box, aes(x = OS_STATUS, y = AGE, fill = OS_STATUS)) +
  geom_boxplot() +
  theme_minimal() +
  labs(
    title = "Distribuição da Idade por Estado de Sobrevivência",
    x = "Estado do Paciente",
    y = "Idade"
  ) +
  scale_fill_manual(values = c("0:LIVING" = "green", "1:DECEASED" = "red")) +
  stat_summary(fun = mean, geom = "point", shape = 20, size = 3, color = "black", fill = "white")  # ponto da média
```

## 4.2 Idade por estágio de cancro

```{r}
# Verificar normalidade para cada estágio de câncer
shapiro_test <- by(amostras_metadados_limpo$AGE, amostras_metadados_limpo$AJCC_PATHOLOGIC_TUMOR_STAGE, shapiro.test)
shapiro_test

```

Grupo com distribuição não normal: Stage III (p = 0.01969)

Logo usamos uma alternantiva não parametrica à ANOVA, o teste
Kruskal-Wallis.

```{r}
kruskal.test(AGE ~ AJCC_PATHOLOGIC_TUMOR_STAGE, data = amostras_metadados_limpo)
```

O p-value é \< 0.05 –\> logo rejeitamos a hipotese nula, existe pelo
menos uma diferença estatisticamente significativa na idade dos
pacientes entre os diferentes estágios de cancro.

Para descobrir quaispares de estágios apresentam diferenças
significativas na idade, usamos o dunntest:

```{r}
dunnTest(AGE ~ AJCC_PATHOLOGIC_TUMOR_STAGE, data = amostras_metadados_limpo, method = "bonferroni")
```

Os pacientes no estágio III têm, em média, idades significativamente
diferentes dos do estágio I.

### Comparações **não significativas**:

Stage I vs Stage II

Stage II vs Stage III

Stage I vs Stage IV

Stage II vs Stage IV

Stage III vs Stage IV

Todas com `p.adj > 0.05`

```{r}
# Boxplot das idades por estágio do cancro
ggplot(amostras_metadados_limpo, aes(x = AJCC_PATHOLOGIC_TUMOR_STAGE, y = AGE, fill = AJCC_PATHOLOGIC_TUMOR_STAGE)) +
  geom_boxplot(outlier.colour = "red", outlier.shape = 16, outlier.size = 2) +
  theme_minimal() +
  labs(title = "Distribuição das Idades por Estágio do Cancro",
       x = "Estágio do Tumor (AJCC)",
       y = "Idade do Paciente") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 8)) +  # Diminui o texto da legenda
  scale_fill_brewer(palette = "Set3")

```

## 4.3 **Distribuição da sobrevivência (OS_MONTHS)** por **estágio do tumor (AJCC_PATHOLOGIC_TUMOR_STAGE)**

Testar a normalidade

```{r}
normality_test <- amostras_metadados_limpo %>%
  group_by(AJCC_PATHOLOGIC_TUMOR_STAGE) %>%
  summarise(shapiro_test = list(shapiro.test(OS_MONTHS))) %>%
  mutate(shapiro_p_value = sapply(shapiro_test, function(x) x$p.value))

print(normality_test)
```

-   **Stage I** (p-value = 6.23e-07): Não é normal.

-   **Stage II** (p-value = 0.1183): A distribuição é aproximadamente
    normal.

-   **Stage III** (p-value = 4.76e-06): Não é normal.

-   **Stage IV** (p-value = 9.13e-08): Não é normal.

Logo usamos um teste não parametrico, o kruskal-Wallis.

```{r}
kruskal.test(OS_MONTHS ~ AJCC_PATHOLOGIC_TUMOR_STAGE, data = amostras_metadados_limpo)

```

p-value \< 0.05 significa que há diferença significativa entre estagios
de grupo em relação a distribuição de sobrevivencia (OS_MONTHS)

Teste de Dunn para identificar quais grupos específicos são
significativamente diferentes entre si.

```{r}
dunnTest(OS_MONTHS ~ AJCC_PATHOLOGIC_TUMOR_STAGE, data = amostras_metadados_limpo, method = "bonferroni")
```

Comparações significativas:

Stage I vs Stage IV

Stage II vs Stage IV

Comparações não significativas:

Stage I - Stage II

Stage I - Stage III

Stage II - Stage III

Stage III - Stage IV

```{r}
# Garantir que o estágio está como fator e ordenado corretamente (opcional mas melhora visual)
amostras_metadados_limpo$AJCC_PATHOLOGIC_TUMOR_STAGE <- factor(
  amostras_metadados_limpo$AJCC_PATHOLOGIC_TUMOR_STAGE,
  levels = c("Stage I", "Stage II", "Stage III", "Stage IV")
)

# Criar o boxplot
ggplot(amostras_metadados_limpo, aes(x = AJCC_PATHOLOGIC_TUMOR_STAGE, y = OS_MONTHS, fill = AJCC_PATHOLOGIC_TUMOR_STAGE)) +
  geom_boxplot(outlier.color = "red", outlier.shape = 1) +
  theme_minimal() +
  labs(title = "Sobrevivência (meses) por Estágio do Tumor",
       x = "Estágio Patológico do Tumor",
       y = "Meses de Sobrevivência") +
  scale_fill_brewer(palette = "Set2") +
  theme(legend.position = "none")  # Remove legenda se quiseres economizar espaço

```

## 4.4 Proporção de pacientes vivos/mortos por estágio

```{r}
# Verifica se OS_STATUS e AJCC_PATHOLOGIC_TUMOR_STAGE estão como fator
amostras_metadados_limpo$OS_STATUS <- factor(amostras_metadados_limpo$OS_STATUS, levels = c("0:LIVING", "1:DECEASED"))
amostras_metadados_limpo$AJCC_PATHOLOGIC_TUMOR_STAGE <- factor(amostras_metadados_limpo$AJCC_PATHOLOGIC_TUMOR_STAGE)

# Gráfico de barras empilhado em proporção
ggplot(amostras_metadados_limpo, aes(x = AJCC_PATHOLOGIC_TUMOR_STAGE, fill = OS_STATUS)) +
  geom_bar(position = "fill") +
  scale_y_continuous(labels = scales::percent) +
  labs(
    title = "Proporção de Pacientes Vivos/Mortos por Estágio Tumoral",
    x = "Estágio Tumoral (AJCC)",
    y = "Proporção",
    fill = "Status de Sobrevivência"
  ) +
  scale_fill_manual(values = c("0:LIVING" = "green", "1:DECEASED" = "red")) +
  theme_minimal()

```

Teste para ver se o estágio está associado ao status de sobrevivência:

```{r}
tabela <- table(amostras_metadados_limpo$AJCC_PATHOLOGIC_TUMOR_STAGE, amostras_metadados_limpo$OS_STATUS)

# Teste do Qui-quadrado
chisq.test(tabela)
```

Indica que há uma associação estatisticamente significativa entre o
estágio do tumor e o status de sobrevivência

## 4.5 Comparação de dimensão do tumor:

### Com o status:

Testar a normalidade

```{r}
#tranformar em numero
amostras_metadados_limpo$LONGEST_DIMENSION <- as.numeric(as.character(amostras_metadados_limpo$LONGEST_DIMENSION))

grupos_status <- split(amostras_metadados_limpo$LONGEST_DIMENSION, amostras_metadados_limpo$OS_STATUS)
lapply(grupos_status, shapiro.test)


```

Ambos os grupos não têm uma distribuição normal, é mais adequado
utilizar testes não paramétricos (Mann-Whitney) para comparar a dimensão
do tumor entre os dois grupos (vivos vs. falecidos).

```{r}
wilcox.test(LONGEST_DIMENSION ~ OS_STATUS, data = amostras_metadados_limpo)
```

p-value \< 0.05 logo podemos concluir que existe uma diferença
estatisticamente significativa entre as dimensões do tumor em pacientes
vivos e mortos.

```{r}
ggplot(amostras_metadados_limpo, aes(x = OS_STATUS, y = LONGEST_DIMENSION, fill = OS_STATUS)) +
  geom_boxplot() +
  scale_fill_manual(values = c("0:LIVING" = "green", "1:DECEASED" = "red")) +  # Definir cores específicas
  labs(title = "Distribuição da Dimensão do Tumor por Status de Sobrevivência",
       x = "Status de Sobrevivência",
       y = "Dimensão do Tumor (LONGEST_DIMENSION)") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```

### Com o estágio:

Testar a normalidade

```{r}
grupos_estagio <- split(amostras_metadados_limpo$LONGEST_DIMENSION, amostras_metadados_limpo$AJCC_PATHOLOGIC_TUMOR_STAGE)
lapply(grupos_estagio, shapiro.test)
```

Todos os valores de p são significativamente pequenos (muito abaixo de
0,05), indicando que a normalidade é rejeitada. Logo usamos o teste não
parametrico Kruskal.

```{r}
kruskal.test(LONGEST_DIMENSION ~ AJCC_PATHOLOGIC_TUMOR_STAGE, data = amostras_metadados_limpo)
```

Há uma diferença estatisticamente significativa nas dimensões do tumor
(LONGEST_DIMENSION) entre os diferentes estágios do tumor. Para
identificar quais estágios específicos diferem entre si usamos o teste
de Dunn:

```{r}
# Remover as linhas com valores ausentes para LONGEST_DIMENSION ou AJCC_PATHOLOGIC_TUMOR_STAGE
amostras_metadados_limpo_sem_na <- amostras_metadados_limpo[!is.na(amostras_metadados_limpo$LONGEST_DIMENSION) & !is.na(amostras_metadados_limpo$AJCC_PATHOLOGIC_TUMOR_STAGE), ]

dunnTest(LONGEST_DIMENSION ~ AJCC_PATHOLOGIC_TUMOR_STAGE, data = amostras_metadados_limpo_sem_na, method = "bonferroni")

```

Só há diferenças estatisticamente significativas apenas entre Stage I e
Stage III/IV.

```{r}
ggplot(amostras_metadados_limpo, aes(x = AJCC_PATHOLOGIC_TUMOR_STAGE, y = LONGEST_DIMENSION, fill = AJCC_PATHOLOGIC_TUMOR_STAGE)) +
  geom_boxplot() +
  labs(title = "Distribuição do Tamanho do Tumor por Estágio do Tumor",
       x = "Estágio do Tumor",
       y = "Tamanho do Tumor (LONGEST_DIMENSION)") +
  scale_fill_brewer(palette = "Set3") +  # Altere a paleta se preferir outras cores
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),  # Inclina os rótulos do eixo X
        legend.text = element_text(size = 8),  # Diminui o tamanho do texto da legenda
        legend.title = element_text(size = 8))  # Diminui o tamanho do título da legenda
```

## 4.6 Correlação entre AGE e OS_MONTHS

testar a normalidade dos residuos\

```{r}
# Verificar NAs e Inf
sum(is.na(amostras_metadados_limpo$OS_MONTHS))  # Contagem de NAs em OS_MONTHS
sum(is.infinite(amostras_metadados_limpo$OS_MONTHS))  # Contagem de Inf em OS_MONTHS
sum(amostras_metadados_limpo$OS_MONTHS <= 0, na.rm = TRUE)  # Contagem de valores <= 0 em OS_MONTHS

# Substituir ou remover valores inválidos
amostras_metadados_limpo <- amostras_metadados_limpo[amostras_metadados_limpo$OS_MONTHS > 0, ]

# Criar o modelo com a transformação log
modelo_log <- lm(log(OS_MONTHS) ~ AGE, data = amostras_metadados_limpo)
summary(modelo_log)

#testar a normalidade
shapiro.test(residuals(modelo))

#testar se a variância dos resíduos não for constante (heterocedasticidade)
bptest(modelo)
```

p-value \<0.05 sugere que **não há evidências de heterocedasticidade**
nos resíduos do seu modelo

p-value \<0.05 sugere que **os resíduos não seguem uma distribuição
normal**.

```{r}
ggplot(amostras_metadados_limpo, aes(x = AGE, y = log(OS_MONTHS), color = OS_STATUS)) +
  geom_point(alpha = 0.6) +  # Plota os pontos
  geom_smooth(method = "lm", se = FALSE, color = "black") +  # Adiciona a linha de regressão
  labs(title = "Relação entre Idade e Log do Tempo de Sobrevivência",
       x = "Idade",
       y = "Log do Tempo de Sobrevivência (OS_MONTHS)") +
  theme_minimal() +
  scale_color_manual(values = c("green", "red"))  # Vivos em verde, falecidos em vermelho
```
